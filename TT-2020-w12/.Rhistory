#list for storing all plots
all_plots_list=c()
# create for loop to produce ggplot2 graphs
for (i in seq_along(list_departments)){
## Create test data.
m_data <- total_words_count%>%
filter(department==list_departments[i])%>%
mutate(top_sentiments = if_else(rank<=3, sentiment,'other'))%>%
group_by(top_sentiments)%>%
summarise(total_each_sentiment = sum(total_each_sentiment))%>%
mutate(percent_sentiment = total_each_sentiment/sum(total_each_sentiment),
rank = dense_rank(desc(percent_sentiment)),
focus_or_not = if_else(top_sentiments!='other','focus','un focus'))%>%
arrange(focus_or_not,desc(percent_sentiment))%>%
mutate(sentiment_color = recode(top_sentiments, !!!color_column))
# rank from largest to smallest with out others to get factors
# lock in factor level order
m_data$top_sentiments <- factor(m_data$top_sentiments,
levels = m_data$top_sentiments)
# Compute the cumulative percentages (top of each rectangle)
m_data$ymax <- cumsum(m_data$percent_sentiment)
# Compute the bottom of each rectangle
m_data$ymin <- c(0, head(m_data$ymax, n=-1))
# Compute label position
m_data$labelPosition <- (m_data$ymax + m_data$ymin) / 2
# Compute a good label
m_data$label <- paste0(m_data$top_sentiments, "\n", round(m_data$percent_sentiment*100,1), '%')
#m_data$label <- glue::glue("<span style='color:{#BA494B};'>m_data$top_sentiments</span> <br> {round(m_data$percent_sentiment*100,1)}%")
#m_data$label <- ifelse(m_data$top_sentiments=='anticipation',
#                       paste0('antici-\npation',
#                              "\n",
#                              round(m_data$percent_sentiment*100,1), '%'),
#                       m_data$label)
#manual hack for anticipation
# Make the plot
this_dept_subtitle<-dept_subtitles[[list_departments[i]]]
# red vine: #BA494B
# Rosehip: #E5CBC1
# Antique: #F0E7DA
# Rain Storm: #36B4B3
# Linen: #E3E4E0
color_pallete <-c('#BA494B','#36B4B3','#c4a48f','#ecedea')
single_plot <- ggplot(m_data,
aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3,
fill=sentiment_color)) +
geom_rect() +
geom_text( x=2,
aes(y=labelPosition, label=label, color=sentiment_color),
size=3.5,
fontface="bold",
family = "JetBrains Mono",
hjust = c(0.8, 0.8, 0.75, 0.01),
hjust = c(0, 0, 0, -0.08)) + # x here controls label position (inner / outer) = margin(r = 8)),
coord_polar(theta="y") +
labs(
title= list_departments[i],
subtitle = this_dept_subtitle)+
xlim(c(-1, 4)) +
theme_void() +
theme(
plot.margin = margin(0, 20, 0, 20),
legend.position = 'none',
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 17, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, family = "JetBrains Mono"),
)+
scale_fill_identity()+
scale_color_identity()#values = color_pallete
print(single_plot)
#save plot under name p_{department}
plot_name<-paste('p',str_replace_all(list_departments[i],"\\s",""),
sep = '_')
assign(plot_name, single_plot,.GlobalEnv)
}
}
plot_function(total_words_count, dept_subtitles)
all_plots<-list(p_Accountant, p_Manager,
p_Customerrelations, p_Humanresources, p_Salesperson,
p_Secretary)
#single plot
heading <-'Emotions Evoked in The Office (American TV series)'
sub_heading = glue::glue("The graph considers selected job-titles (actors) and the eight emotions; anger, anticipation, disgust, fear,<br>joy, sadness,
surprise, and trust. For each job-title, <span style='color:#BA494B;'>**Anticipation**</span>,
<span style='color:#36B4B3;'>**trust**</span>, and
<span style='color:#c4a48f'>**joy**</span> were in the top three<br>evoked emotions:
the rest are categorised as <span style='color:gray50;'>**others**</span>. Only Season 1 and 2 are considered.")
theme_set(theme_light_modified(base_family = "JetBrains Mono"))
# plot
# use simple function:
# create graphing function
plot_function <- function(total_words_count, dept_subtitles, ...){
# create list of counties in data to loop over
list_departments <- unique(total_words_count$department)
#list for storing all plots
all_plots_list=c()
# create for loop to produce ggplot2 graphs
for (i in seq_along(list_departments)){
## Create test data.
m_data <- total_words_count%>%
filter(department==list_departments[i])%>%
mutate(top_sentiments = if_else(rank<=3, sentiment,'other'))%>%
group_by(top_sentiments)%>%
summarise(total_each_sentiment = sum(total_each_sentiment))%>%
mutate(percent_sentiment = total_each_sentiment/sum(total_each_sentiment),
rank = dense_rank(desc(percent_sentiment)),
focus_or_not = if_else(top_sentiments!='other','focus','un focus'))%>%
arrange(focus_or_not,desc(percent_sentiment))%>%
mutate(sentiment_color = recode(top_sentiments, !!!color_column))
# rank from largest to smallest with out others to get factors
# lock in factor level order
m_data$top_sentiments <- factor(m_data$top_sentiments,
levels = m_data$top_sentiments)
# Compute the cumulative percentages (top of each rectangle)
m_data$ymax <- cumsum(m_data$percent_sentiment)
# Compute the bottom of each rectangle
m_data$ymin <- c(0, head(m_data$ymax, n=-1))
# Compute label position
m_data$labelPosition <- (m_data$ymax + m_data$ymin) / 2
# Compute a good label
m_data$label <- paste0(m_data$top_sentiments, "\n", round(m_data$percent_sentiment*100,1), '%')
#m_data$label <- glue::glue("<span style='color:{#BA494B};'>m_data$top_sentiments</span> <br> {round(m_data$percent_sentiment*100,1)}%")
#m_data$label <- ifelse(m_data$top_sentiments=='anticipation',
#                       paste0('antici-\npation',
#                              "\n",
#                              round(m_data$percent_sentiment*100,1), '%'),
#                       m_data$label)
#manual hack for anticipation
# Make the plot
this_dept_subtitle<-dept_subtitles[[list_departments[i]]]
# red vine: #BA494B
# Rosehip: #E5CBC1
# Antique: #F0E7DA
# Rain Storm: #36B4B3
# Linen: #E3E4E0
color_pallete <-c('#BA494B','#36B4B3','#c4a48f','#ecedea')
single_plot <- ggplot(m_data,
aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3,
fill=sentiment_color)) +
geom_rect() +
geom_text( x=2,
aes(y=labelPosition, label=label, color=sentiment_color),
size=3.5,
fontface="bold",
family = "JetBrains Mono",
hjust = c(0.8, 0.8, 0.75, 0.01),
vjust = c(0, 0, 0, -0.08)) + # x here controls label position (inner / outer) = margin(r = 8)),
coord_polar(theta="y") +
labs(
title= list_departments[i],
subtitle = this_dept_subtitle)+
xlim(c(-1, 4)) +
theme_void() +
theme(
plot.margin = margin(0, 20, 0, 20),
legend.position = 'none',
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 17, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, family = "JetBrains Mono"),
)+
scale_fill_identity()+
scale_color_identity()#values = color_pallete
print(single_plot)
#save plot under name p_{department}
plot_name<-paste('p',str_replace_all(list_departments[i],"\\s",""),
sep = '_')
assign(plot_name, single_plot,.GlobalEnv)
}
}
plot_function(total_words_count, dept_subtitles)
all_plots<-list(p_Accountant, p_Manager,
p_Customerrelations, p_Humanresources, p_Salesperson,
p_Secretary)
#single plot
heading <-'Emotions Evoked in The Office (American TV series)'
sub_heading = glue::glue("The graph considers selected job-titles (actors) and the eight emotions; anger, anticipation, disgust, fear,<br>joy, sadness,
surprise, and trust. For each job-title, <span style='color:#BA494B;'>**Anticipation**</span>,
<span style='color:#36B4B3;'>**trust**</span>, and
<span style='color:#c4a48f'>**joy**</span> were in the top three<br>evoked emotions:
the rest are categorised as <span style='color:gray50;'>**others**</span>. Only Season 1 and 2 are considered.")
theme_set(theme_light_modified(base_family = "JetBrains Mono"))
wrap_plots(all_plots, ncol = 3) +
plot_annotation(
title = heading,
subtitle = sub_heading,
caption = "Tidytuesday week #12 | Data: schrute R-package & economicsoftheoffice.com | @kinenealan",
theme = theme(
text = element_text(color = "black", size = 14),
plot.margin = margin(10, -100, 10, -100),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "#white"),
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 28),
plot.subtitle = element_markdown(hjust = 0.5 , size = 14, family = "JetBrains Mono",margin = margin(b = 5)),
plot.caption = element_text(hjust = 0.5 ,color = "gray50", size = 10)
)
)+
ggsave(here::here("plots", "the_office_emotions_v2.png"), dpi = 320, width = 14, height = 10, scale = 1)
# plot
# use simple function:
# create graphing function
plot_function <- function(total_words_count, dept_subtitles, ...){
# create list of counties in data to loop over
list_departments <- unique(total_words_count$department)
#list for storing all plots
all_plots_list=c()
# create for loop to produce ggplot2 graphs
for (i in seq_along(list_departments)){
## Create test data.
m_data <- total_words_count%>%
filter(department==list_departments[i])%>%
mutate(top_sentiments = if_else(rank<=3, sentiment,'other'))%>%
group_by(top_sentiments)%>%
summarise(total_each_sentiment = sum(total_each_sentiment))%>%
mutate(percent_sentiment = total_each_sentiment/sum(total_each_sentiment),
rank = dense_rank(desc(percent_sentiment)),
focus_or_not = if_else(top_sentiments!='other','focus','un focus'))%>%
arrange(focus_or_not,desc(percent_sentiment))%>%
mutate(sentiment_color = recode(top_sentiments, !!!color_column))
# rank from largest to smallest with out others to get factors
# lock in factor level order
m_data$top_sentiments <- factor(m_data$top_sentiments,
levels = m_data$top_sentiments)
# Compute the cumulative percentages (top of each rectangle)
m_data$ymax <- cumsum(m_data$percent_sentiment)
# Compute the bottom of each rectangle
m_data$ymin <- c(0, head(m_data$ymax, n=-1))
# Compute label position
m_data$labelPosition <- (m_data$ymax + m_data$ymin) / 2
# Compute a good label
m_data$label <- paste0(m_data$top_sentiments, "\n", round(m_data$percent_sentiment*100,1), '%')
#m_data$label <- glue::glue("<span style='color:{#BA494B};'>m_data$top_sentiments</span> <br> {round(m_data$percent_sentiment*100,1)}%")
#m_data$label <- ifelse(m_data$top_sentiments=='anticipation',
#                       paste0('antici-\npation',
#                              "\n",
#                              round(m_data$percent_sentiment*100,1), '%'),
#                       m_data$label)
#manual hack for anticipation
# Make the plot
this_dept_subtitle<-dept_subtitles[[list_departments[i]]]
# red vine: #BA494B
# Rosehip: #E5CBC1
# Antique: #F0E7DA
# Rain Storm: #36B4B3
# Linen: #E3E4E0
color_pallete <-c('#BA494B','#36B4B3','#c4a48f','#ecedea')
single_plot <- ggplot(m_data,
aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3,
fill=sentiment_color)) +
geom_rect() +
geom_text( x=2,
aes(y=labelPosition, label=label, color=sentiment_color),
size=3.5,
fontface="bold",
family = "JetBrains Mono",
hjust = c(0.8, 0.8, 0.75, 0.01)) + # x here controls label position (inner / outer) = margin(r = 8)),
coord_polar(theta="y") +
labs(
title= list_departments[i],
subtitle = this_dept_subtitle)+
xlim(c(-1, 4)) +
theme_void() +
theme(
plot.margin = margin(0, 20, 0, 20),
legend.position = 'none',
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 17, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, family = "JetBrains Mono"),
)+
scale_fill_identity()+
scale_color_identity()#values = color_pallete
print(single_plot)
#save plot under name p_{department}
plot_name<-paste('p',str_replace_all(list_departments[i],"\\s",""),
sep = '_')
assign(plot_name, single_plot,.GlobalEnv)
}
}
plot_function(total_words_count, dept_subtitles)
all_plots<-list(p_Accountant, p_Manager,
p_Customerrelations, p_Humanresources, p_Salesperson,
p_Secretary)
#single plot
heading <-'Emotions Evoked in The Office (American TV series)'
sub_heading = glue::glue("The graph considers selected job-titles (actors) and the eight emotions; anger, anticipation, disgust, fear,<br>joy, sadness,
surprise, and trust. For each job-title, <span style='color:#BA494B;'>**Anticipation**</span>,
<span style='color:#36B4B3;'>**trust**</span>, and
<span style='color:#c4a48f'>**joy**</span> were in the top three<br>evoked emotions:
the rest are categorised as <span style='color:gray50;'>**others**</span>. Only Season 1 and 2 are considered.")
theme_set(theme_light_modified(base_family = "JetBrains Mono"))
wrap_plots(all_plots, ncol = 3) +
plot_annotation(
title = heading,
subtitle = sub_heading,
caption = "Tidytuesday week #12 | Data: schrute R-package & economicsoftheoffice.com | @kinenealan",
theme = theme(
text = element_text(color = "black", size = 14),
plot.margin = margin(10, -100, 10, -100),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "#white"),
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 28),
plot.subtitle = element_markdown(hjust = 0.5 , size = 14, family = "JetBrains Mono",margin = margin(b = 5)),
plot.caption = element_text(hjust = 0.5 ,color = "gray50", size = 10)
)
)+
ggsave(here::here("plots", "the_office_emotions_v2.png"), dpi = 320, width = 14, height = 10, scale = 1)
dept_subtitles<-c('Manager'= "(Michael Scott, Dwight Schrute)",
'Human resources'="(Toby Flenderson)",
'Secretary'="(Pam Beasley)",
'Salesperson'="(Jim Halpert, Stanley Hudson,\nPhyllis Lapin)",
'Accountant'="(Angela Martin, Oscar Gutierrez,\nKevin Malone)",
'Customer relations'="(Kelly Kapoor)")
plot_function(total_words_count, dept_subtitles)
wrap_plots(all_plots, ncol = 3) +
plot_annotation(
title = heading,
subtitle = sub_heading,
caption = "Tidytuesday week #12 | Data: schrute R-package & economicsoftheoffice.com | @kinenealan",
theme = theme(
text = element_text(color = "black", size = 14),
plot.margin = margin(10, -100, 10, -100),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "#white"),
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 28),
plot.subtitle = element_markdown(hjust = 0.5 , size = 14, family = "JetBrains Mono",margin = margin(b = 5)),
plot.caption = element_text(hjust = 0.5 ,color = "gray50", size = 10)
)
)+
ggsave(here::here("plots", "the_office_emotions_v2.png"), dpi = 320, width = 14, height = 10, scale = 1)
library(schrute)
library(tidyverse)
library(ggplot2)
library(ggtext)
library(glue)
library(tidytext)
library(textdata)
library(ggpmthemes)
library(patchwork)
library(here)
#https://bradlindblad.github.io/schrute/articles/theoffice.html
theoffice_data <- schrute::theoffice
#http://economicsoftheoffice.com/characters/
character_names_office<-c('Michael Scott',
'Dwight Schrute',
'Jim Halpert',
'Pam Beasley',
'Stanley Hudson',
'Phyllis Lapin',
'Angela Martin',
'Oscar Gutierrez',
'Kevin Malone',
'Creed Bratton',
'Meredith Palmer',
'Andy Bernard',
'Toby Flenderson',
'Gabe Lewis',
'Kelly Kapoor',
'Ryan Howard',
'Erin Hannon')
used_character_names_office<-c('Michael'= 'Manager',
'Dwight'= 'Manager',
'Toby'= 'Human resources',
'Pam'= 'Secretary',
'Erin'= 'Secretary',
'Jim'= 'Salesperson',
'Stanley'= 'Salesperson',
'Phyllis'= 'Salesperson',
'Andy' = 'Salesperson',
'Angela'= 'Accountant',
'Oscar'= 'Accountant',
'Kevin'= 'Accountant',
'Kelly'='Customer relations'
)
dept_subtitles<-c('Manager'= "(Michael Scott, Dwight Schrute)",
'Human resources'="(Toby Flenderson)",
'Secretary'="(Pam Beasley)",
'Salesperson'="(Jim Halpert, Stanley Hudson,\nPhyllis Lapin)",
'Accountant'="(Angela Martin, Oscar Gutierrez,\nKevin Malone)",
'Customer relations'="(Kelly Kapoor)")
# Looking at trust at the office
#lexicon for sentiment analysis
# Name: NRC Word-Emotion Association Lexicon
# URL: http://saifmohammad.com/WebPages/lexicons.html
emortion_sentiments<-get_sentiments("nrc")%>%
filter(!sentiment%in%c('positive','negative'))
#tokenize all the lines and remove stop words
token_theoffice_data <- theoffice_data %>%
tidytext::unnest_tokens(word, text)%>%
anti_join(stop_words, by = "word") %>%
filter(!grepl('[0-9]', word))%>%
inner_join(emortion_sentiments, by = 'word')
total_words_count<-token_theoffice_data%>%
filter(character%in%names(used_character_names_office))%>%
filter(season %in% c('01', '02'))%>%
mutate(character_2 = character,
department=recode(character_2, !!!used_character_names_office))%>%
group_by(department, sentiment)%>%
summarise(total_each_sentiment=n())%>%
ungroup()%>%
group_by(department)%>%
mutate(total_sentiment = sum(total_each_sentiment),
percent_sentiment = total_each_sentiment/total_sentiment)%>%
mutate(rank = dense_rank(desc(percent_sentiment)),
highest_or_not = if_else(rank==1,1,0))%>%
ungroup()
color_column <-c('anticipation' = '#BA494B',
'trust' = '#36B4B3',
'joy' = '#c4a48f',
'surprise'='#E5CBC1',
'other' = '#ecedea')
# plot
# use simple function:
# create graphing function
plot_function <- function(total_words_count, dept_subtitles, ...){
# create list of counties in data to loop over
list_departments <- unique(total_words_count$department)
#list for storing all plots
all_plots_list=c()
# create for loop to produce ggplot2 graphs
for (i in seq_along(list_departments)){
## Create test data.
m_data <- total_words_count%>%
filter(department==list_departments[i])%>%
mutate(top_sentiments = if_else(rank<=3, sentiment,'other'))%>%
group_by(top_sentiments)%>%
summarise(total_each_sentiment = sum(total_each_sentiment))%>%
mutate(percent_sentiment = total_each_sentiment/sum(total_each_sentiment),
rank = dense_rank(desc(percent_sentiment)),
focus_or_not = if_else(top_sentiments!='other','focus','un focus'))%>%
arrange(focus_or_not,desc(percent_sentiment))%>%
mutate(sentiment_color = recode(top_sentiments, !!!color_column))
# rank from largest to smallest with out others to get factors
# lock in factor level order
m_data$top_sentiments <- factor(m_data$top_sentiments,
levels = m_data$top_sentiments)
# Compute the cumulative percentages (top of each rectangle)
m_data$ymax <- cumsum(m_data$percent_sentiment)
# Compute the bottom of each rectangle
m_data$ymin <- c(0, head(m_data$ymax, n=-1))
# Compute label position
m_data$labelPosition <- (m_data$ymax + m_data$ymin) / 2
# Compute a good label
m_data$label <- paste0(m_data$top_sentiments, "\n", round(m_data$percent_sentiment*100,1), '%')
#m_data$label <- glue::glue("<span style='color:{#BA494B};'>m_data$top_sentiments</span> <br> {round(m_data$percent_sentiment*100,1)}%")
#m_data$label <- ifelse(m_data$top_sentiments=='anticipation',
#                       paste0('antici-\npation',
#                              "\n",
#                              round(m_data$percent_sentiment*100,1), '%'),
#                       m_data$label)
#manual hack for anticipation
# Make the plot
this_dept_subtitle<-dept_subtitles[[list_departments[i]]]
# red vine: #BA494B
# Rosehip: #E5CBC1
# Antique: #F0E7DA
# Rain Storm: #36B4B3
# Linen: #E3E4E0
color_pallete <-c('#BA494B','#36B4B3','#c4a48f','#ecedea')
single_plot <- ggplot(m_data,
aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3,
fill=sentiment_color)) +
geom_rect() +
geom_text( x=2,
aes(y=labelPosition, label=label, color=sentiment_color),
size=3.5,
fontface="bold",
family = "JetBrains Mono",
hjust = c(0.8, 0.8, 0.75, 0.01)) + # x here controls label position (inner / outer) = margin(r = 8)),
coord_polar(theta="y") +
labs(
title= list_departments[i],
subtitle = this_dept_subtitle)+
xlim(c(-1, 4)) +
theme_void() +
theme(
plot.margin = margin(0, 20, 0, 20),
legend.position = 'none',
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 17, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, family = "JetBrains Mono"),
)+
scale_fill_identity()+
scale_color_identity()#values = color_pallete
print(single_plot)
#save plot under name p_{department}
plot_name<-paste('p',str_replace_all(list_departments[i],"\\s",""),
sep = '_')
assign(plot_name, single_plot,.GlobalEnv)
}
}
plot_function(total_words_count, dept_subtitles)
all_plots<-list(p_Accountant, p_Manager,
p_Customerrelations, p_Humanresources, p_Salesperson,
p_Secretary)
#single plot
heading <-'Emotions Evoked in The Office (American TV series)'
sub_heading = glue::glue("The graph considers selected job-titles (actors) and the eight emotions; anger, anticipation, disgust, fear,<br>joy, sadness,
surprise, and trust. For each job-title, <span style='color:#BA494B;'>**Anticipation**</span>,
<span style='color:#36B4B3;'>**trust**</span>, and
<span style='color:#c4a48f'>**joy**</span> were in the top three<br>evoked emotions:
the rest are categorised as <span style='color:gray50;'>**others**</span>. Only Season 1 and 2 are considered.")
theme_set(theme_light_modified(base_family = "JetBrains Mono"))
wrap_plots(all_plots, ncol = 3) +
plot_annotation(
title = heading,
subtitle = sub_heading,
caption = "Tidytuesday week #12 | Data: schrute R-package & economicsoftheoffice.com | @kinenealan",
theme = theme(
text = element_text(color = "black", size = 14),
plot.margin = margin(10, -100, 10, -100),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "#white"),
plot.title = element_markdown(hjust = 0.5, family = "JetBrains Mono Bold", size = 28),
plot.subtitle = element_markdown(hjust = 0.5 , size = 14, family = "JetBrains Mono",margin = margin(b = 5)),
plot.caption = element_text(hjust = 0.5 ,color = "gray50", size = 10)
)
)+
ggsave(here::here("plots", "the_office_emotions_v2.png"), dpi = 320, width = 14, height = 10, scale = 1)
